{"version":3,"sources":["webpack:///home/schumajr/cosmos/libs/hagar-service/src/index.ts","webpack:///home/schumajr/cosmos/libs/hagar-service/src/lib/hagar.service.ts","webpack:///home/schumajr/cosmos/libs/pings/src/index.ts","webpack:///home/schumajr/cosmos/libs/pings/src/lib/all-pings/all-pings.component.ts","webpack:///home/schumajr/cosmos/libs/pings/src/lib/all-pings/all-pings.component.html","webpack:///home/schumajr/cosmos/libs/pings/src/lib/codex-ping/codex-ping.component.ts","webpack:///home/schumajr/cosmos/libs/pings/src/lib/codex-ping/codex-ping.component.html","webpack:///home/schumajr/cosmos/libs/pings/src/lib/hagar-ping/hagar-ping.component.ts","webpack:///home/schumajr/cosmos/libs/pings/src/lib/hagar-ping/hagar-ping.component.html","webpack:///home/schumajr/cosmos/libs/pings/src/lib/igor-ping/igor-ping.component.ts","webpack:///home/schumajr/cosmos/libs/pings/src/lib/igor-ping/igor-ping.component.html","webpack:///home/schumajr/cosmos/libs/pings/src/lib/pings-routing.module.ts","webpack:///home/schumajr/cosmos/libs/pings/src/lib/pings.module.ts"],"names":["HagarService","http","pingURL","aadGroupsCommandURL","aadGroupsQueryURL","aadGroupsSearchURL","usersURL","pingState","payload","message","chatter","status","timestamp","pingRequestState","UNKNOWN","response","error","pingState$","asObservable","pingRequestState$","httpOptions","headers","console","log","next","LOADING","get","pipe","_","ERROR","SUCCESS","subscribe","req","operation","groups","post","providedIn","AllPingsComponent","selector","templateUrl","styleUrls","CodexPingComponent","codexService","Status","doPing","HagarPingComponent","hagarService","IgorPingComponent","igorService","routes","path","component","data","roles","canActivate","PingsRoutingModule","forChild","imports","exports","PingsModule","declarations"],"mappings":"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","file":"cosmos-pings-es5.js","sourcesContent":["export * from './lib/hagar.service';","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, BehaviorSubject, of } from 'rxjs';\nimport { catchError, retry, tap } from 'rxjs/operators';\n\nimport { PingFunctionResponse, PingRequestState, Status } from \"@cosmos/types\";\n\nimport { AADGroup } from '@cosmos/types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HagarService {\n  private pingURL = 'https://wrdsb-hagar.azurewebsites.net/api/ping';\n  \n  private aadGroupsCommandURL = 'https://wrdsb-hagar.azurewebsites.net/api/aad-group-command';\n  private aadGroupsQueryURL = 'https://wrdsb-hagar.azurewebsites.net/api/aad-group-query';\n  private aadGroupsSearchURL = '';\n  \n  private usersURL = '';\n\n  private pingState: BehaviorSubject<PingFunctionResponse> = new BehaviorSubject({\n    payload: {\n      message: \"\",\n      chatter: \"\",\n      status: 0,\n      timestamp: \"\"\n    }\n  });\n  private pingRequestState: BehaviorSubject<PingRequestState> = new BehaviorSubject({\n    status: Status.UNKNOWN,\n    response: 'response',\n    error: 'error'\n  });\n  public readonly pingState$: Observable<PingFunctionResponse> = this.pingState.asObservable();\n  public readonly pingRequestState$: Observable<PingRequestState> = this.pingRequestState.asObservable();\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    })\n  };\n\n  constructor(\n    private http: HttpClient\n  ) {}\n\n  doPing(): void {\n    console.log('Pinging HAGAR...');\n\n    this.pingRequestState.next({\n      status: Status.LOADING,\n      response: 'unknown',\n      error: 'unknown'\n    });\n\n    this.http.get<PingFunctionResponse>(this.pingURL, this.httpOptions)\n      .pipe(\n        tap(_ => console.log('tap')),\n        retry(2),\n        catchError(error => {\n          console.log('catch error');\n          this.pingRequestState.next({\n            status: Status.ERROR,\n            response: '',\n            error: error\n          });\n          this.pingState.next({\n            payload: {\n              message: \"error\",\n              chatter: \"error\",\n              status: 200,\n              timestamp: \"timestamp\"\n            }\n          });\n          throw 'error pinging HAGAR';\n        }),\n        tap(_ => {\n          this.pingRequestState.next({\n            status: Status.SUCCESS,\n            response: 'success',\n            error: ''\n          });\n          console.log('success pinging HAGAR');\n        })\n      )\n      .subscribe(response => this.pingState.next(response));\n  }\n\n  listGroups(): Observable<AADGroup[]> {\n    let req = {\n      operation: 'list'\n    };\n    console.log('HAGAR: list groups');\n\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n      })\n    };\n    let groups = this.http.post<AADGroup[]>(this.aadGroupsQueryURL, req, this.httpOptions);\n    return groups;\n  }\n}\n","export * from './lib/pings.module';\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'cosmos-all-pings',\n  templateUrl: './all-pings.component.html',\n  styleUrls: ['./all-pings.component.scss']\n})\nexport class AllPingsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div>Codex: <cosmos-codex-ping></cosmos-codex-ping></div>\n\n<hr>\n<div>HAGAR: <cosmos-hagar-ping></cosmos-hagar-ping></div>\n\n<hr>\n<div>IGOR: <cosmos-igor-ping></cosmos-igor-ping></div>\n","import { Component, OnInit } from '@angular/core';\n\nimport { CodexService } from \"@cosmos/codex-service\";\nimport { PingFunctionResponse, PingRequestState, Status } from \"@cosmos/types\";\n\n@Component({\n  selector: 'cosmos-codex-ping',\n  templateUrl: './codex-ping.component.html',\n  styleUrls: ['./codex-ping.component.scss']\n})\nexport class CodexPingComponent implements OnInit {\n  readonly Status = Status;\n  readonly pingState$;\n  readonly pingRequestState$;\n\n  constructor(private codexService: CodexService) {\n    this.pingState$ = this.codexService.pingState$;\n    this.pingRequestState$ = this.codexService.pingRequestState$;\n  }\n\n  ngOnInit(): void {\n    //this.doPing();\n  }\n\n  doPing() {\n    this.codexService.doPing();\n  }\n}\n","<ng-container *ngIf=\"(pingRequestState$ | async) as pingRequestState\">\n    <ng-container [ngSwitch]=\"pingRequestState['status']\">\n        <span *ngSwitchCase=\"Status.UNKNOWN\">Unknown</span>\n        <span *ngSwitchCase=\"Status.LOADING\">Pinging Codex...</span>\n        <span *ngSwitchCase=\"Status.ERROR\">Error: {{pingRequestState$.error}}</span>\n        <span *ngSwitchCase=\"Status.SUCCESS\">Success: {{pingRequestState$.response}}</span>\n    </ng-container>\n</ng-container>\n\n<div>\n    {{ pingRequestState$ | async | json }}\n</div>\n\n<div>\n    {{ pingState$ | async | json }}\n</div>\n\n<button (click)=\"doPing()\">Ping!</button>","import { Component, OnInit } from '@angular/core';\n\nimport { HagarService } from '@cosmos/hagar-service';\nimport { PingFunctionResponse, PingRequestState, Status } from \"@cosmos/types\";\n\n@Component({\n  selector: 'cosmos-hagar-ping',\n  templateUrl: './hagar-ping.component.html',\n  styleUrls: ['./hagar-ping.component.scss']\n})\nexport class HagarPingComponent implements OnInit {\n  readonly Status = Status;\n  readonly pingState$;\n  readonly pingRequestState$;\n\n  constructor(private hagarService: HagarService) {\n    this.pingState$ = this.hagarService.pingState$;\n    this.pingRequestState$ = this.hagarService.pingRequestState$;\n  }\n\n  ngOnInit(): void {\n    //this.doPing();\n  }\n\n  doPing() {\n    this.hagarService.doPing();\n  }\n}\n","<ng-container *ngIf=\"(pingRequestState$ | async) as pingRequestState\">\n    <ng-container [ngSwitch]=\"pingRequestState['status']\">\n        <span *ngSwitchCase=\"Status.UNKNOWN\">Unknown</span>\n        <span *ngSwitchCase=\"Status.LOADING\">Pinging HAGAR...</span>\n        <span *ngSwitchCase=\"Status.ERROR\">Error: {{pingRequestState$.error}}</span>\n        <span *ngSwitchCase=\"Status.SUCCESS\">Success: {{pingRequestState$.response}}</span>\n    </ng-container>\n</ng-container>\n\n<div>\n    {{ pingRequestState$ | async | json }}\n</div>\n\n<div>\n    {{ pingState$ | async | json }}\n</div>\n\n<button (click)=\"doPing()\">Ping!</button>","import { Component, OnInit } from '@angular/core';\n\nimport { IGORService } from \"@cosmos/igor-service\";\nimport { PingFunctionResponse, PingRequestState, Status } from \"@cosmos/types\";\n\n@Component({\n  selector: 'cosmos-igor-ping',\n  templateUrl: './igor-ping.component.html',\n  styleUrls: ['./igor-ping.component.scss']\n})\nexport class IgorPingComponent implements OnInit {\n  readonly Status = Status;\n  readonly pingState$;\n  readonly pingRequestState$;\n\n  constructor(private igorService: IGORService) {\n    this.pingState$ = this.igorService.pingState$;\n    this.pingRequestState$ = this.igorService.pingRequestState$;\n  }\n\n  ngOnInit(): void {\n    //this.doPing();\n  }\n\n  doPing() {\n    this.igorService.doPing();\n  }\n}\n","<ng-container *ngIf=\"(pingRequestState$ | async) as pingRequestState\">\n    <ng-container [ngSwitch]=\"pingRequestState['status']\">\n        <span *ngSwitchCase=\"Status.UNKNOWN\">Unknown</span>\n        <span *ngSwitchCase=\"Status.LOADING\">Pinging IGOR...</span>\n        <span *ngSwitchCase=\"Status.ERROR\">Error: {{pingRequestState$.error}}</span>\n        <span *ngSwitchCase=\"Status.SUCCESS\">Success: {{pingRequestState$.response}}</span>\n    </ng-container>\n</ng-container>\n\n<div>\n    {{ pingRequestState$ | async | json }}\n</div>\n\n<div>\n    {{ pingState$ | async | json }}\n</div>\n\n<button (click)=\"doPing()\">Ping!</button>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MsalGuard } from '@azure/msal-angular';\nimport { RolesGuard } from \"@cosmos/guards\";\n\nimport { AllPingsComponent } from \"./all-pings/all-pings.component\";\n\nimport { CodexPingComponent } from './codex-ping/codex-ping.component';\nimport { HagarPingComponent } from './hagar-ping/hagar-ping.component';\nimport { IgorPingComponent } from './igor-ping/igor-ping.component';\n\nconst routes: Routes = [\n  {\n    path: 'codex',\n    component: CodexPingComponent,\n    data: {\n      roles: ['cosmos-superuser', 'cosmos-user-its']\n    },\n    canActivate: [\n      MsalGuard, RolesGuard\n    ]\n  },\n  {\n    path: 'hagar',\n    component: HagarPingComponent,\n    data: {\n      roles: ['cosmos-superuser', 'cosmos-user-its']\n    },\n    canActivate: [\n      MsalGuard, RolesGuard\n    ]\n  },\n  {\n    path: 'igor',\n    component: IgorPingComponent,\n    data: {\n      roles: ['cosmos-superuser', 'cosmos-user-its']\n    },\n    canActivate: [\n      MsalGuard, RolesGuard\n    ]\n  },\n  {\n    path: '',\n    component: AllPingsComponent,\n    data: {\n      roles: ['cosmos-superuser', 'cosmos-user-its']\n    },\n    canActivate: [\n      MsalGuard, RolesGuard\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PingsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PingsRoutingModule } from \"./pings-routing.module\";\n\nimport { AllPingsComponent } from './all-pings/all-pings.component';\n\nimport { CodexPingComponent } from './codex-ping/codex-ping.component';\nimport { HagarPingComponent } from './hagar-ping/hagar-ping.component';\nimport { IgorPingComponent } from './igor-ping/igor-ping.component';\n\n@NgModule({\n  declarations: [\n    AllPingsComponent,\n    CodexPingComponent,\n    HagarPingComponent,\n    IgorPingComponent\n  ],\n  imports: [\n    CommonModule,\n    PingsRoutingModule\n  ],\n  exports: [\n    AllPingsComponent,\n    CodexPingComponent,\n    HagarPingComponent,\n    IgorPingComponent\n  ]\n})\nexport class PingsModule {}\n"]}