{"version":3,"sources":["/home/schumajr/cosmos/libs/hagar-service/src/index.ts","/home/schumajr/cosmos/libs/hagar-service/src/lib/hagar.service.ts","/home/schumajr/cosmos/libs/pings/src/index.ts","/home/schumajr/cosmos/libs/pings/src/lib/all-pings/all-pings.component.ts","/home/schumajr/cosmos/libs/pings/src/lib/all-pings/all-pings.component.html","/home/schumajr/cosmos/libs/pings/src/lib/codex-ping/codex-ping.component.ts","/home/schumajr/cosmos/libs/pings/src/lib/codex-ping/codex-ping.component.html","/home/schumajr/cosmos/libs/pings/src/lib/hagar-ping/hagar-ping.component.ts","/home/schumajr/cosmos/libs/pings/src/lib/hagar-ping/hagar-ping.component.html","/home/schumajr/cosmos/libs/pings/src/lib/igor-ping/igor-ping.component.ts","/home/schumajr/cosmos/libs/pings/src/lib/igor-ping/igor-ping.component.html","/home/schumajr/cosmos/libs/pings/src/lib/pings-routing.module.ts","/home/schumajr/cosmos/libs/pings/src/lib/pings.module.ts"],"names":[],"mappings":"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","file":"cosmos-pings-es2015.js","sourcesContent":["export * from './lib/hagar.service';","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, BehaviorSubject, of } from 'rxjs';\nimport { catchError, retry, tap } from 'rxjs/operators';\n\nimport { PingFunctionResponse, PingRequestState, Status } from \"@cosmos/types\";\n\nimport { AADGroup } from '@cosmos/types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HagarService {\n  private pingURL = 'https://wrdsb-hagar.azurewebsites.net/api/ping';\n  \n  private aadGroupsCommandURL = 'https://wrdsb-hagar.azurewebsites.net/api/aad-group-command';\n  private aadGroupsQueryURL = 'https://wrdsb-hagar.azurewebsites.net/api/aad-group-query';\n  private aadGroupsSearchURL = '';\n  \n  private usersURL = '';\n\n  private pingState: BehaviorSubject<PingFunctionResponse> = new BehaviorSubject({\n    payload: {\n      message: \"\",\n      chatter: \"\",\n      status: 0,\n      timestamp: \"\"\n    }\n  });\n  private pingRequestState: BehaviorSubject<PingRequestState> = new BehaviorSubject({\n    status: Status.UNKNOWN,\n    response: 'response',\n    error: 'error'\n  });\n  public readonly pingState$: Observable<PingFunctionResponse> = this.pingState.asObservable();\n  public readonly pingRequestState$: Observable<PingRequestState> = this.pingRequestState.asObservable();\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    })\n  };\n\n  constructor(\n    private http: HttpClient\n  ) {}\n\n  doPing(): void {\n    console.log('Pinging HAGAR...');\n\n    this.pingRequestState.next({\n      status: Status.LOADING,\n      response: 'unknown',\n      error: 'unknown'\n    });\n\n    this.http.get<PingFunctionResponse>(this.pingURL, this.httpOptions)\n      .pipe(\n        tap(_ => console.log('tap')),\n        retry(2),\n        catchError(error => {\n          console.log('catch error');\n          this.pingRequestState.next({\n            status: Status.ERROR,\n            response: '',\n            error: error\n          });\n          this.pingState.next({\n            payload: {\n              message: \"error\",\n              chatter: \"error\",\n              status: 200,\n              timestamp: \"timestamp\"\n            }\n          });\n          throw 'error pinging HAGAR';\n        }),\n        tap(_ => {\n          this.pingRequestState.next({\n            status: Status.SUCCESS,\n            response: 'success',\n            error: ''\n          });\n          console.log('success pinging HAGAR');\n        })\n      )\n      .subscribe(response => this.pingState.next(response));\n  }\n\n  listGroups(): Observable<AADGroup[]> {\n    let req = {\n      operation: 'list'\n    };\n    console.log('HAGAR: list groups');\n\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n      })\n    };\n    let groups = this.http.post<AADGroup[]>(this.aadGroupsQueryURL, req, this.httpOptions);\n    return groups;\n  }\n}\n","export * from './lib/pings.module';\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'cosmos-all-pings',\n  templateUrl: './all-pings.component.html',\n  styleUrls: ['./all-pings.component.scss']\n})\nexport class AllPingsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div>Codex: <cosmos-codex-ping></cosmos-codex-ping></div>\n\n<hr>\n<div>HAGAR: <cosmos-hagar-ping></cosmos-hagar-ping></div>\n\n<hr>\n<div>IGOR: <cosmos-igor-ping></cosmos-igor-ping></div>\n","import { Component, OnInit } from '@angular/core';\n\nimport { CodexService } from \"@cosmos/codex-service\";\nimport { PingFunctionResponse, PingRequestState, Status } from \"@cosmos/types\";\n\n@Component({\n  selector: 'cosmos-codex-ping',\n  templateUrl: './codex-ping.component.html',\n  styleUrls: ['./codex-ping.component.scss']\n})\nexport class CodexPingComponent implements OnInit {\n  readonly Status = Status;\n  readonly pingState$;\n  readonly pingRequestState$;\n\n  constructor(private codexService: CodexService) {\n    this.pingState$ = this.codexService.pingState$;\n    this.pingRequestState$ = this.codexService.pingRequestState$;\n  }\n\n  ngOnInit(): void {\n    //this.doPing();\n  }\n\n  doPing() {\n    this.codexService.doPing();\n  }\n}\n","<ng-container *ngIf=\"(pingRequestState$ | async) as pingRequestState\">\n    <ng-container [ngSwitch]=\"pingRequestState['status']\">\n        <span *ngSwitchCase=\"Status.UNKNOWN\">Unknown</span>\n        <span *ngSwitchCase=\"Status.LOADING\">Pinging Codex...</span>\n        <span *ngSwitchCase=\"Status.ERROR\">Error: {{pingRequestState$.error}}</span>\n        <span *ngSwitchCase=\"Status.SUCCESS\">Success: {{pingRequestState$.response}}</span>\n    </ng-container>\n</ng-container>\n\n<div>\n    {{ pingRequestState$ | async | json }}\n</div>\n\n<div>\n    {{ pingState$ | async | json }}\n</div>\n\n<button (click)=\"doPing()\">Ping!</button>","import { Component, OnInit } from '@angular/core';\n\nimport { HagarService } from '@cosmos/hagar-service';\nimport { PingFunctionResponse, PingRequestState, Status } from \"@cosmos/types\";\n\n@Component({\n  selector: 'cosmos-hagar-ping',\n  templateUrl: './hagar-ping.component.html',\n  styleUrls: ['./hagar-ping.component.scss']\n})\nexport class HagarPingComponent implements OnInit {\n  readonly Status = Status;\n  readonly pingState$;\n  readonly pingRequestState$;\n\n  constructor(private hagarService: HagarService) {\n    this.pingState$ = this.hagarService.pingState$;\n    this.pingRequestState$ = this.hagarService.pingRequestState$;\n  }\n\n  ngOnInit(): void {\n    //this.doPing();\n  }\n\n  doPing() {\n    this.hagarService.doPing();\n  }\n}\n","<ng-container *ngIf=\"(pingRequestState$ | async) as pingRequestState\">\n    <ng-container [ngSwitch]=\"pingRequestState['status']\">\n        <span *ngSwitchCase=\"Status.UNKNOWN\">Unknown</span>\n        <span *ngSwitchCase=\"Status.LOADING\">Pinging HAGAR...</span>\n        <span *ngSwitchCase=\"Status.ERROR\">Error: {{pingRequestState$.error}}</span>\n        <span *ngSwitchCase=\"Status.SUCCESS\">Success: {{pingRequestState$.response}}</span>\n    </ng-container>\n</ng-container>\n\n<div>\n    {{ pingRequestState$ | async | json }}\n</div>\n\n<div>\n    {{ pingState$ | async | json }}\n</div>\n\n<button (click)=\"doPing()\">Ping!</button>","import { Component, OnInit } from '@angular/core';\n\nimport { IGORService } from \"@cosmos/igor-service\";\nimport { PingFunctionResponse, PingRequestState, Status } from \"@cosmos/types\";\n\n@Component({\n  selector: 'cosmos-igor-ping',\n  templateUrl: './igor-ping.component.html',\n  styleUrls: ['./igor-ping.component.scss']\n})\nexport class IgorPingComponent implements OnInit {\n  readonly Status = Status;\n  readonly pingState$;\n  readonly pingRequestState$;\n\n  constructor(private igorService: IGORService) {\n    this.pingState$ = this.igorService.pingState$;\n    this.pingRequestState$ = this.igorService.pingRequestState$;\n  }\n\n  ngOnInit(): void {\n    //this.doPing();\n  }\n\n  doPing() {\n    this.igorService.doPing();\n  }\n}\n","<ng-container *ngIf=\"(pingRequestState$ | async) as pingRequestState\">\n    <ng-container [ngSwitch]=\"pingRequestState['status']\">\n        <span *ngSwitchCase=\"Status.UNKNOWN\">Unknown</span>\n        <span *ngSwitchCase=\"Status.LOADING\">Pinging IGOR...</span>\n        <span *ngSwitchCase=\"Status.ERROR\">Error: {{pingRequestState$.error}}</span>\n        <span *ngSwitchCase=\"Status.SUCCESS\">Success: {{pingRequestState$.response}}</span>\n    </ng-container>\n</ng-container>\n\n<div>\n    {{ pingRequestState$ | async | json }}\n</div>\n\n<div>\n    {{ pingState$ | async | json }}\n</div>\n\n<button (click)=\"doPing()\">Ping!</button>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MsalGuard } from '@azure/msal-angular';\nimport { RolesGuard } from \"@cosmos/guards\";\n\nimport { AllPingsComponent } from \"./all-pings/all-pings.component\";\n\nimport { CodexPingComponent } from './codex-ping/codex-ping.component';\nimport { HagarPingComponent } from './hagar-ping/hagar-ping.component';\nimport { IgorPingComponent } from './igor-ping/igor-ping.component';\n\nconst routes: Routes = [\n  {\n    path: 'codex',\n    component: CodexPingComponent,\n    data: {\n      roles: ['cosmos-superuser', 'cosmos-user-its']\n    },\n    canActivate: [\n      MsalGuard, RolesGuard\n    ]\n  },\n  {\n    path: 'hagar',\n    component: HagarPingComponent,\n    data: {\n      roles: ['cosmos-superuser', 'cosmos-user-its']\n    },\n    canActivate: [\n      MsalGuard, RolesGuard\n    ]\n  },\n  {\n    path: 'igor',\n    component: IgorPingComponent,\n    data: {\n      roles: ['cosmos-superuser', 'cosmos-user-its']\n    },\n    canActivate: [\n      MsalGuard, RolesGuard\n    ]\n  },\n  {\n    path: '',\n    component: AllPingsComponent,\n    data: {\n      roles: ['cosmos-superuser', 'cosmos-user-its']\n    },\n    canActivate: [\n      MsalGuard, RolesGuard\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PingsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PingsRoutingModule } from \"./pings-routing.module\";\n\nimport { AllPingsComponent } from './all-pings/all-pings.component';\n\nimport { CodexPingComponent } from './codex-ping/codex-ping.component';\nimport { HagarPingComponent } from './hagar-ping/hagar-ping.component';\nimport { IgorPingComponent } from './igor-ping/igor-ping.component';\n\n@NgModule({\n  declarations: [\n    AllPingsComponent,\n    CodexPingComponent,\n    HagarPingComponent,\n    IgorPingComponent\n  ],\n  imports: [\n    CommonModule,\n    PingsRoutingModule\n  ],\n  exports: [\n    AllPingsComponent,\n    CodexPingComponent,\n    HagarPingComponent,\n    IgorPingComponent\n  ]\n})\nexport class PingsModule {}\n"],"sourceRoot":"webpack:///"}