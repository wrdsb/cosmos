{"version":3,"sources":["webpack:///home/schumajr/cosmos/libs/codex-service/src/index.ts","webpack:///home/schumajr/cosmos/libs/codex-service/src/lib/codex.service.ts","webpack:///home/schumajr/cosmos/libs/igor-service/src/index.ts","webpack:///home/schumajr/cosmos/libs/igor-service/src/lib/igor.service.ts","webpack:///home/schumajr/cosmos/libs/types/src/index.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/entities/codex/codex-person.class.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/entities/codex/index.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/entities/index.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/entities/ipps/index.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/entities/ipps/ipps-position.class.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/entities/ipps/ipps-record.class.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/entities/sparkrock/index.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/entities/sparkrock/sparkrock-position.class.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/entities/sparkrock/sparkrock-record.class.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/entities/trillium/index.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/entities/trillium/trillium-assignment.class.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/entities/trillium/trillium-record.class.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/signalr-connection.model.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/types.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/ui/index.ts","webpack:///home/schumajr/cosmos/libs/types/src/lib/ui/theme.model.ts"],"names":["CodexService","http","pingURL","searchURL","pingState","payload","message","chatter","status","timestamp","pingRequestState","UNKNOWN","response","error","pingState$","asObservable","pingRequestState$","httpOptions","headers","console","log","next","LOADING","get","pipe","_","ERROR","SUCCESS","subscribe","body","post","providedIn","IGORService","googleGroupsCommandURL","googleGroupsQueryURL","googleGroupsSearchURL","usersURL","list","params","set","groups","CodexPerson","IPPSPosition","IPPSRecord","SparkrockPosition","SparkrockRecord","TrilliumAssignment","TrilliumRecord","SignalRConnection","Status","Theme"],"mappings":"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","file":"common-es5.js","sourcesContent":["export * from './lib/codex.service';\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { catchError, retry, tap } from 'rxjs/operators';\n\nimport { PingFunctionResponse, PingRequestState, Status } from \"@cosmos/types\";\n\nimport { GoogleGroup } from \"@cosmos/types\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CodexService {\n  private pingURL = 'https://wrdsb-codex.azurewebsites.net/api/ping';\n\n  private searchURL = 'https://wrdsb-codex.azurewebsites.net/api/igor-groups-groups-search';\n  \n  private pingState: BehaviorSubject<PingFunctionResponse> = new BehaviorSubject({\n    payload: {\n      message: \"\",\n      chatter: \"\",\n      status: 0,\n      timestamp: \"\"\n    }\n  });\n  private pingRequestState: BehaviorSubject<PingRequestState> = new BehaviorSubject({\n    status: Status.UNKNOWN,\n    response: 'response',\n    error: 'error'\n  });\n  public readonly pingState$: Observable<PingFunctionResponse> = this.pingState.asObservable();\n  public readonly pingRequestState$: Observable<PingRequestState> = this.pingRequestState.asObservable();\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    })\n  };\n\n  constructor(\n    private http: HttpClient\n  ) {}\n\n  doPing(): void {\n    console.log('Pinging Codex...');\n\n    this.pingRequestState.next({\n      status: Status.LOADING,\n      response: 'unknown',\n      error: 'unknown'\n    });\n\n    this.http.get<PingFunctionResponse>(this.pingURL, this.httpOptions)\n      .pipe(\n        tap(_ => console.log('tap')),\n        retry(2),\n        catchError(error => {\n          console.log('catch error');\n          this.pingRequestState.next({\n            status: Status.ERROR,\n            response: '',\n            error: error\n          });\n          this.pingState.next({\n            payload: {\n              message: \"error\",\n              chatter: \"error\",\n              status: 200,\n              timestamp: \"timestamp\"\n            }\n          });\n          throw 'error pinging Codex';\n        }),\n        tap(_ => {\n          this.pingRequestState.next({\n            status: Status.SUCCESS,\n            response: 'success',\n            error: ''\n          });\n          console.log('success pinging Codex');\n        })\n      )\n      .subscribe(response => this.pingState.next(response));\n  }\n\n  search() {\n    console.log('search codex');\n\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n      })\n    };\n\n    let body = {\n      payload: {\n        //count: true,\n        //select: '*',\n        //filter: '',\n        //facets: '',\n        //orderby: '',\n        //search: '',\n        //skip: '',\n        //top: ''\n      }\n    };\n\n    return this.http.post<GoogleGroup[]>(this.searchURL, body, this.httpOptions);\n  }\n}\n","export * from './lib/igor.service';\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { catchError, retry, tap } from 'rxjs/operators';\n\nimport { PingFunctionResponse, PingRequestState, Status } from \"@cosmos/types\";\n\nimport { IGORGroup } from '@cosmos/types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class IGORService {\n  private pingURL = 'https://wrdsb-igor3.azurewebsites.net/api/ping';\n  \n  private googleGroupsCommandURL = 'https://wrdsb-igor3.azurewebsites.net/api/google-group-command';\n  private googleGroupsQueryURL = 'https://wrdsb-igor3.azurewebsites.net/api/group-query';\n  private googleGroupsSearchURL = '';\n\n  private usersURL = '';\n\n  private pingState: BehaviorSubject<PingFunctionResponse> = new BehaviorSubject({\n    payload: {\n      message: \"\",\n      chatter: \"\",\n      status: 0,\n      timestamp: \"\"\n    }\n  });\n  private pingRequestState: BehaviorSubject<PingRequestState> = new BehaviorSubject({\n    status: Status.UNKNOWN,\n    response: 'response',\n    error: 'error'\n  });\n  public readonly pingState$: Observable<PingFunctionResponse> = this.pingState.asObservable();\n  public readonly pingRequestState$: Observable<PingRequestState> = this.pingRequestState.asObservable();\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    })\n  };\n\n  constructor(\n    private http: HttpClient\n  ) {}\n\n  doPing(): void {\n    console.log('Pinging IGOR...');\n\n    this.pingRequestState.next({\n      status: Status.LOADING,\n      response: 'unknown',\n      error: 'unknown'\n    });\n\n    this.http.get<PingFunctionResponse>(this.pingURL, this.httpOptions)\n      .pipe(\n        tap(_ => console.log('tap')),\n        retry(2),\n        catchError(error => {\n          console.log('catch error');\n          this.pingRequestState.next({\n            status: Status.ERROR,\n            response: '',\n            error: error\n          });\n          this.pingState.next({\n            payload: {\n              message: \"error\",\n              chatter: \"error\",\n              status: 200,\n              timestamp: \"timestamp\"\n            }\n          });\n          throw 'error pinging IGOR';\n        }),\n        tap(_ => {\n          this.pingRequestState.next({\n            status: Status.SUCCESS,\n            response: 'success',\n            error: ''\n          });\n          console.log('success pinging IGOR');\n        })\n      )\n      .subscribe(response => this.pingState.next(response));\n  }\n\n  listGroups(list: string): Observable<IGORGroup[]> {\n    console.log('IGOR: list groups');\n\n    let httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n      }),\n      params: new HttpParams()\n        .set('operation', 'list')\n        .set('payload', list)\n    };\n    let groups = this.http.get<IGORGroup[]>(this.googleGroupsQueryURL, httpOptions);\n    return groups;\n  }\n}\n","export * from './lib/types';\nexport * from './lib/signalr-connection.model';\n\nexport * from './lib/entities';\nexport * from './lib/azure-functions';\n\nexport * from './lib/ui';","import { Person } from \"../conceptual/person.interface\";\nimport { IPPSRecord } from \"../ipps/ipps-record.class\";\nimport { TrilliumRecord } from \"../trillium/trillium-record.class\";\n\nclass CodexPerson implements Person {\n    id: string;\n    ein: string;\n    email: string;\n    pal: string;\n\n    name: string;\n    first_name: string;\n    last_name: string;\n    sortable_name: string;\n\n    people_set_memberships: Array<string>;\n\n    school_codes: Array<string>;\n    location_codes: Array<string>;\n\n    ippsRecord: IPPSRecord;\n    trilliumRecord: TrilliumRecord;\n\n    its_field_tech_for: string[];\n    dlst_for: string[];\n    catc_contact_for: string[];\n    its_program_manager_for: string[];\n}\n\nexport { CodexPerson };\n","export * from './codex-person.class';","export * from './conceptual';\n\nexport * from './aad';\nexport * from './codex';\nexport * from './google';\nexport * from './hagar';\nexport * from './igor';\nexport * from './ipps';\nexport * from './sorting-hat';\nexport * from './sparkrock';\nexport * from './team-viewer';\nexport * from './trillium';","export * from './ipps-position.class';\nexport * from './ipps-record.class';","import { Position } from \"../conceptual/position.interface\";\n\nclass IPPSPosition implements Position {\n    id: string;\n    ein: string;\n    activity_code: string;\n    employee_group_category: string;\n    employee_group_code: string;\n    employee_group_description: string;\n    extension: string;\n    job_code: string;\n    job_description: string;\n    location_code: string;\n    location_description: string;\n    panel: string;\n    phone_no: string;\n    school_code: string;\n    school_type: string;\n    home_location_indicator: string;\n    position_start_date: string;\n    position_end_date: string;\n}\n\nexport { IPPSPosition };","import { HRISRecord } from \"../conceptual/hris-record.interface\";\nimport { IPPSPosition } from \"./ipps-position.class\";\n\nclass IPPSRecord implements HRISRecord {\n    id: string;\n    ein: string;\n    email: string;\n    username: string;\n    first_name: string;\n    last_name: string;\n    name: string;\n    sortable_name: string;\n    directory: string;\n    phone: string;\n    extension: string;\n    mbxnumber: string;\n    created_at: string;\n    updated_at: string;\n    deleted_at: string;\n    deleted: boolean\n    positions: Array<IPPSPosition>;\n}\n\nexport { IPPSRecord };","export * from './sparkrock-position.class';\nexport * from './sparkrock-record.class';","import { Position } from \"../conceptual/position.interface\";\n\nclass SparkrockPosition implements Position {\n    id: string;\n    ein: string;\n    activity_code: string;\n    employee_group_category: string;\n    employee_group_code: string;\n    employee_group_description: string;\n    extension: string;\n    job_code: string;\n    job_description: string;\n    location_code: string;\n    location_description: string;\n    panel: string;\n    phone_no: string;\n    school_code: string;\n    school_type: string;\n    home_location_indicator: string;\n    position_start_date: string;\n    position_end_date: string;\n}\n\nexport { SparkrockPosition };","import { HRISRecord } from \"../conceptual/hris-record.interface\";\nimport { SparkrockPosition } from \"./sparkrock-position.class\";\n\nclass SparkrockRecord implements HRISRecord {\n    id: string;\n    ein: string;\n    email: string;\n    username: string;\n    first_name: string;\n    last_name: string;\n    name: string;\n    sortable_name: string;\n    directory: string;\n    phone: string;\n    extension: string;\n    mbxnumber: string;\n    created_at: string;\n    updated_at: string;\n    deleted_at: string;\n    deleted: boolean\n    positions: Array<SparkrockPosition>;\n}\n\nexport { SparkrockRecord };","export * from './trillium-assignment.class';\nexport * from './trillium-record.class';","import { TeachingAssignment } from \"../conceptual/teaching-assignment.interface\";\n\nclass TrilliumAssignment implements TeachingAssignment {\n    id: string;\n    school_code: string;\n    class_code: string;\n    teacher_ein: string;\n    teacher_email: string;\n    created_at: string;\n    updated_at: string;\n    deleted_at: string;\n    deleted: boolean\n}\n\nexport { TrilliumAssignment };","import { SISRecord } from \"../conceptual/sis-record.interface\";\nimport { TrilliumAssignment } from \"./trillium-assignment.class\";\n\nclass TrilliumRecord implements SISRecord {\n    id: string;\n    ein: string;\n    school_code: string;\n    school_year: string;\n    staff_type: string;\n    status: string;\n    created_at: string;\n    updated_at: string;\n    deleted_at: string;\n    deleted: boolean\n    assignments: Array<TrilliumAssignment>\n}\n\nexport { TrilliumRecord };","export class SignalRConnection {\n    url: string;\n    accessToken: string;\n }","import { Observable } from \"rxjs\";\n\nexport interface Environment {\n  production: boolean;\n  appName: string;\n\n  aadClientId: string;\n  aadAuthority: string;\n  aadValidateAuthority: boolean;\n  aadRedirectUri: string;\n  aadPostLogoutRedirectUri: string;\n  aadNavigateToLoginRequestUrl: boolean;\n}\n\nexport interface PingRequestState {\n  status: Status;\n  response?: string;\n  error?: string;\n}\n\nexport enum Status {\n  UNKNOWN = 'UNKNOWN',\n  LOADING = 'LOADING',\n  SUCCESS = 'SUCCESS',\n  ERROR = 'ERROR'\n}","export * from './menu.model';\nexport * from './theme.model';","export class Theme {\n    name: string;\n}"]}